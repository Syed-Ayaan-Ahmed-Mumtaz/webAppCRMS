-- Backend_SQL_Code.sql
-- This script contains SQL commands to set up your database schema.
-- Note: The Flask application provided uses a mock in-memory database manager
-- for demonstration purposes. You would use these SQL commands to set up
-- your actual SQL Server database when integrating pyodbc.

CREATE DATABASE RECORDS;
USE RECORDS;

CREATE TABLE Users (
  UserID INT PRIMARY KEY IDENTITY(1,1), -- IDENTITY for auto-incrementing ID
  Username NVARCHAR(50) UNIQUE NOT NULL,
  -- Store password hashes, not plain text for security.
  -- NVARCHAR(255) for password_hash to accommodate typical hash lengths.
  PasswordHash NVARCHAR(255) NOT NULL
);

CREATE TABLE CriminalRecords (
  RecordID INT PRIMARY KEY IDENTITY(1,1), -- IDENTITY for auto-incrementing ID
  Name NVARCHAR(100) NOT NULL,            -- Entity Name (e.g., Case Name)
  Description NVARCHAR(MAX),               -- Description of the crime/case
  Status NVARCHAR(50),                     -- Status (e.g., Open, Closed, Under Investigation, Arrest Made)
  CrimeDate DATE,                          -- Date of Crime
  OfficerName NVARCHAR(100)                -- Name of the officer handling the case
  -- Age INT,                            -- (Optional) Add these columns if needed
  -- Gender NVARCHAR(10),                -- (Optional)
  -- CrimeType NVARCHAR(100),            -- (Optional) Consider a separate CrimeTypes table for normalization
);


-- Add a user for login testing with a hashed password
-- In a real scenario, hash the password before inserting using your application's hashing logic.
-- For demonstration, replace 'hashed_admin_password' with an actual hash (e.g., generated by Python's werkzeug.security)
-- Example (Python code to get a hash): from werkzeug.security import generate_password_hash; print(generate_password_hash('admin'))
INSERT INTO Users (Username, PasswordHash) VALUES
('admin', '<PLACEHOLDER_FOR_GENERATED_HASH_OF_ADMIN_PASSWORD>'); -- Replace with actual hash!
-- For the mock_db_manager, 'admin' with password 'admin' is pre-hashed.

-- Add sample criminal records
INSERT INTO CriminalRecords (Name, Description, Status, CrimeDate, OfficerName) VALUES
('Robbery at Central Bank', 'Suspect stole cash from vault.', 'Open', '2023-01-01', 'Officer Mehmood'),
('Shoplifting at Grand Mall', 'Minor theft of electronics.', 'Closed', '2023-01-05', 'Officer Shazia'),
('Assault in Park', 'Verbal and physical altercation.', 'Under Investigation', '2023-02-10', 'Officer Khan'),
('Vandalism on Main Street', 'Graffiti on public property.', 'Arrest Made', '2023-03-15', 'Officer Patel'),
('Missing Person Report', 'Child reported missing from home.', 'Open', '2023-04-20', 'Officer Mehmood');


-- Example SELECT statements for testing
SELECT * FROM Users;
SELECT * FROM CriminalRecords;

-- Example SELECT for login check
SELECT UserID FROM Users
WHERE Username = 'admin' AND PasswordHash = '<PLACEHOLDER_FOR_GENERATED_HASH_OF_ADMIN_PASSWORD>'; -- Match the hash here

-- Example SELECT for all records (as seen on records.html/manage.html)
SELECT
  RecordID AS [ID],
  Name AS [Case Name],
  Description,
  Status,
  OfficerName,
  CrimeDate AS [Date]
FROM CriminalRecords;

-- Example UPDATE statement
UPDATE CriminalRecords
SET
  Status = 'Closed',
  Description = 'Case resolved, suspect apprehended and sentenced.'
WHERE RecordID = 1;

-- Example DELETE statement
DELETE FROM CriminalRecords
WHERE RecordID = 1;

-- Example SELECT by ID (for edit operations)
SELECT * FROM CriminalRecords
WHERE RecordID = 1;

-- Example SELECT with filters (for queries.html)
SELECT
  RecordID AS [ID],
  Name AS [Case Name],
  Description,
  Status,
  OfficerName,
  CrimeDate AS [Date]
FROM CriminalRecords
WHERE
  Name LIKE '%Robbery%'
  AND OfficerName LIKE '%Mehmood%'
  AND Status = 'Open';